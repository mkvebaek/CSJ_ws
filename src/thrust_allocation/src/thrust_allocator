#!/usr/bin/env python3
from re import T
import rospy
from std_msgs.msg import Float64MultiArray

import numpy as np
from common_tools.math_tools import *


class Lim():
    def __init__(self, a_min, a_max) -> None:
        self.max = a_max
        self.min = a_min


class Thrust_allocator():
    def __init__(self) -> None:
        self.tau = np.zeros(3)
        self.lx = np.array([-0.4574, -0.4574, 0.3875])
        self.ly = np.array([0.055, -0.055, 0])
        self.alpha = np.array([np.pi/2.0, np.pi/2.0])

        self.u = np.zeros(3)
        self.K = np.diag([1, 1, 1])
        self.B = np.array([
            [np.cos(self.alpha[0]), np.cos(self.alpha[1]), 1],
            [np.sin(self.alpha[0]), np.sin(self.alpha[1]), 0],
            [self.lx[0]*np.sin(self.alpha[0]) - self.ly[0]*np.cos(self.alpha[0]), self.lx[1]*np.sin(self.alpha[1]) -
             self.ly[1]*np.cos(self.alpha[1]), -self.ly[2]]
        ])

        self.u_extended = np.zeros(5)
        self.K_extended = np.diag([1, 1, 1, 1, 1])
        self.B_extended = np.array([
            [1, 0, 1, 0, 0],
            [0, 1, 0, 1, 1],
            [-self.ly[0], self.lx[0], -self.ly[1], self.lx[1], self.lx[2]]
        ])

        # Constaints
        self.u_lim = np.array([Lim(0, 1), Lim(0, 1), Lim(-1, 1)])
        # alpha_lim = np.array([[0, 1], [0, 1], [-1, 1]])

        # ROS
        self.sub_tau = rospy.Subscriber(
            "/CSV/tau", Float64MultiArray, self.callback, queue_size=1)
        self.pub_u = rospy.Publisher(
            '/CSV/u', Float64MultiArray, queue_size=1)
        self.pub_alpha = rospy.Publisher(
            '/CSV/alpha', Float64MultiArray, queue_size=1)
        self.msg = Float64MultiArray()

    def publish(self):
        self.msg.data = np.concatenate(
            (self.u, np.array([self.alpha[0], self.alpha[1]])), axis=None)
        self.pub_u.publish(self.msg)

        self.msg.data = self.alpha
        self.pub_alpha.publish(self.msg)

    def callback(self, msg):
        tau = msg.data
        self.tau = np.array([tau[0], tau[1], tau[2]])
        self.extended_thrust_allocation()

    def fixed_thrust_allocation(self):
        """
        Fixed-angle thrust allocation using the moore-penrose
        pseudo inverse
        """
        self.u = np.linalg.pinv(self.B)@self.tau

    def extended_thrust_allocation(self):
        """
        Varying-angle thrust allocation using the moore-penrose
        psuedo inverse on the extended thruster configurating
        matrix
        """
        # Pseudo-inverse
        self.u_extended = np.linalg.pinv(self.B_extended)@self.tau

        # Desired thrust
        self.u[0] = min(self.u_lim[0].max,
                        np.sqrt(self.u_extended[0]**2 + self.u_extended[1]**2))
        self.u[1] = min(self.u_lim[1].max,
                        np.sqrt(self.u_extended[2]**2 + self.u_extended[3]**2))
        self.u[2] = min(self.u_lim[2].max,
                        max(self.u_lim[2].min, np.sqrt(self.u_extended[4]**2)))

        # Desired angles
        self.alpha[0] = np.arctan2(self.u_extended[1], self.u_extended[0])
        self.alpha[1] = np.arctan2(self.u_extended[3], self.u_extended[2])


if __name__ == '__main__':
    rospy.init_node("thrust_allocator")
    rospy.loginfo("INITIALIZING THRUST ALLOCATOR NODE")

    thruster_allocator = Thrust_allocator()

    r = rospy.Rate(100)

    while not rospy.is_shutdown():
        ### Function and method calls here ###
        r.sleep()
        thruster_allocator.publish()

    rospy.spin()
    rospy.shutdown()